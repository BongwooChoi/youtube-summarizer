# -*- coding: utf-8 -*-
"""youtube-summarizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bUyLCUoZN5edvEWONVaF3nUvG14z7yP7
"""

#!pip install streamlit yt-dlp openai-whisper openai langchain langchain_community

import os
os.environ["OPENAI_API_KEY"] = "sk-proj-2HuRIDeSyU3b4BwNGQj9T3BlbkFJRdd0oQDbQSwmWctcuhbs"

import streamlit as st
from langchain.document_loaders import YoutubeLoader
from langchain.chains.summarize import load_summarize_chain
from langchain.llms import OpenAI
import whisper
import yt_dlp

# --- UI 디자인 ---
st.title("YouTube 영상 요약 AI 서비스")
st.subheader("영상 URL을 입력하여 요약된 보고서를 받아보세요!")

# --- YouTube 영상 URL 입력 ---
video_url = st.text_input("YouTube 영상 URL 입력:")

if video_url:
    # --- 진행 상태 표시 ---
    with st.spinner("영상 다운로드 및 음성 인식 중..."):
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': '%(id)s.%(ext)s',
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(video_url, download=False)
            video_id = info_dict.get("id", None)
            video_title = info_dict.get('title', None)
            ydl.download([video_url])

        audio_file = video_id + ".webm"  # 오디오 파일 경로
        model = whisper.load_model("base")  # Whisper 모델 로드
        result = model.transcribe(audio_file)
        transcript = result["text"]

    # --- 텍스트 요약 ---
    with st.spinner("텍스트 요약 중..."):
        loader = YoutubeLoader.from_youtube_url(video_url, add_video_info=True)
        docs = loader.load()
        chain = load_summarize_chain(OpenAI(temperature=0, model_name="gpt-4-1106-preview"), chain_type="map_reduce")
        summary = chain.run(docs)

    # --- 결과 출력 ---
    st.subheader(f"[{video_title}] 요약 결과")
    st.write(summary)